
import unittest
import settings


class Add(object):
    def __init__(self, x ,y):
        self.result = x + y

class Sub(object):
    def __init__(self, x ,y):
        self.result = x - y

class Mul(object):
    def __init__(self, x ,y):
        self.result = x * y

class Div(object):
    def __init__(self, x ,y):
        self.result = float(x) / float(y)

class MyTestCase(unittest.TestCase):

    def test_add_result(self):
        try:
            assert Add(settings.First_elem, settings.Second_elem).result == settings.Add_resulting
        except AssertionError:
            raise( AssertionError( "Result of adding is incorrect -> %s should be -> %s" % (settings.Add_resulting,Add(settings.First_elem, settings.Second_elem).result)))

    def test_sub_result(self):
        try:
            assert Sub(settings.First_elem, settings.Second_elem).result == settings.Sub_resulting
        except AssertionError:
            raise( AssertionError( "Result of subtraction is incorrect -> %s should be -> %s" % (settings.Sub_resulting,Sub(settings.First_elem, settings.Second_elem).result)))

    def test_mul_result(self):
        try:
            assert Mul(settings.First_elem, settings.Second_elem).result == settings.Mul_resulting
        except AssertionError:
            raise( AssertionError( "Result of multiplying is incorrect -> %s should be -> %s" % (settings.Mul_resulting,Mul(settings.First_elem, settings.Second_elem).result)))

    def test_div_result(self):
        try:
            settings.Second_elem != 0
            try:
                assert Div(settings.First_elem, settings.Second_elem).result == settings.Div_resulting
            except AssertionError:
                raise( AssertionError( "Result of dividing is incorrect -> %s should be -> %s" % (settings.Div_resulting,Div(settings.First_elem, settings.Second_elem).result)))
        except ZeroDivisionError:
            raise ZeroDivisionError("Zero division detected !!!")

if __name__ == '__main__':
    unittest.main()
